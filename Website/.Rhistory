data<- ReadAffy(celfile.path=opt$input)
raw_data<-log2(exprs(data))
library(affy)                 #methods for Affymetriy Oligonucleotide Arrays
library(hgu133plus2cdf)       #environment representing the HG-U133_Plus_2.cdf file
library(hgu133plus2.db)       #for gene annotation
library(simpleaffy)           #for quality control
library(affyPLM)              #for probe-level model image
#CRAN packages
#install.packages("VennDiagram")
#install.packages("gtools")
#install.packages("optparse")
library(VennDiagram)
library(gtools)
library(optparse)
my_table<- function(norm_data, outputname){
affyids<-rownames(norm_data);
mapping <- select(hgu133plus2.db, keys=affyids, columns="SYMBOL")     #contains affyids and corresponding gene symbol(s)
mapping[is.na(mapping)]<-"NA"
mapping<-mapping[which(!duplicated(mapping$PROBEID)),]                #take only the first genesymbol for each affyid
MEAN_ALL<-apply(norm_data, MARGIN=1, FUN=mean)
summary<-cbind(mapping, norm_data, MEAN_ALL)
summary<-summary[summary$SYMBOL!="NA",]                               #delete entries with unknown gene symbols
summary <- summary[order(summary$SYMBOL, -abs(summary$MEAN_ALL) ), ]  #sort by SYMBOL and reverse of abs(value)
summary<-summary[which(!duplicated(summary$SYMBOL)), ]
#select intensities from control group and IFN stimulated group
gesund<- cbind(summary$ND_51_CD14_133Plus_2.CEL, summary$ND_52_CD14_133Plus_2.CEL, summary$ND_53_CD14_133Plus_2.CEL);
krank<- cbind(summary$ND_11_CD14_IFNa2a_90_133Plus_2.CEL, summary$ND_13_CD14_IFNa2a_90_133Plus_2.CEL, summary$ND_5_CD14_IFNa2a_90_133Plus_2.CEL, summary$ND_6_CD14_IFNa2a_90_133Plus_2.CEL, summary$ND_7_CD14_IFNa2a_90_133Plus_2.CEL, summary$ND_8_CD14_IFNa2a_90_133Plus_2.CEL)
#add additional columns
gesund_median<-apply(gesund, MARGIN=1, FUN=median)
krank_median<-apply(krank, MARGIN=1, FUN=median)
gesund_mean<-apply(gesund, MARGIN=1, FUN=mean)
krank_mean<-apply(krank, MARGIN=1, FUN=mean)
gesund_sd<-apply(gesund, MARGIN=1, FUN=sd)
krank_sd<-apply(krank, MARGIN=1, FUN=sd)
gesund_min<-apply(gesund, MARGIN=1, FUN=min)
krank_min<-apply(krank, MARGIN=1, FUN=min)
gesund_max<-apply(gesund, MARGIN=1, FUN=max)
krank_max<-apply(krank, MARGIN=1, FUN=max)
p_value<- apply(cbind(gesund, krank), 1, function(x) {t.test(x[1:3], x[4:9])$p.value }) #calculate p-value (t.test)
SLR<-gesund_mean-krank_mean #calculate signal log ratio
FC<-logratio2foldchange(SLR, base=2)  #calculate fold change
#combine intensities and new columns to one data set
summary<-cbind(summary, gesund_median, krank_median, gesund_mean, krank_mean, gesund_sd, krank_sd, gesund_min, krank_min, gesund_max, krank_max, p_value, FC, SLR)
write.table(summary, row.names=FALSE, file=paste0(output, "/", outputname, ".txt"), sep="\t", dec=",")
write.csv(summary, row.names=FALSE, file=paste0(output, "/", outputname,".csv") )
return(summary);
}
data<- ReadAffy(celfile.path=opt$input)
raw_data<-log2(exprs(data))
data<- ReadAffy(celfile.path="/opt/lampp/htdocs/Projekt/ende/uploads")
raw_data<-log2(exprs(data))
rma<-rma(data)
rma_data<-exprs(rma)
##MAS5-Normalization
mas5<-mas5(data, sc=150)
mas5_data<-log2(exprs(mas5));
